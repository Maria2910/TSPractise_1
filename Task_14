export function map(mapper?: any, input?: any): any {
    if (arguments.length === 0) {
        return map;
    }
     if (arguments.length === 1) {
        return (subInput: any) => subInput.map(mapper);
    }
    return input.map(mapper);
}

export function filter<T>(filterer: (item: T) => boolean): typeof filter;
export function filter<T>(filterer: (item: T) => boolean, input: T[]): T[];
export function filter<T>(filterer?: (item: T) => boolean, input?: T[]): any {
    if (arguments.length === 0) {
        return filter;
    }
    if (arguments.length === 1) {
        return (subInput: T[]) => subInput.filter(filterer as (item: T) => boolean);
    }
    return (input as T[]).filter(filterer as (item: T) => boolean);
}

export function reduce<T, U>(reducer: (accumulator: U, currentValue: T) => U): typeof reduce;
export function reduce<T, U>(reducer: (accumulator: U, currentValue: T) => U, initialValue: U): (input: T[]) => U;
export function reduce<T, U>(reducer: (accumulator: U, currentValue: T) => U, initialValue: U, input: T[]): U;
export function reduce<T, U>(reducer?: (accumulator: U, currentValue: T) => U, initialValue?: U, input?: T[]): any {
    if (arguments.length === 0) {
        return reduce;
    }
    if (arguments.length === 1) {
      return function subFunction(subInitialValue: U, subInput?: T[]): any {
          if (arguments.length === 0) {
              return subFunction;
          }
            if (arguments.length === 1) {
                return (subSubInput: T[]) => (subSubInput as T[]).reduce(reducer as (accumulator: U, currentValue: T) => U, subInitialValue);
            }
          return (subInput as T[]).reduce(reducer as (accumulator: U, currentValue: T) => U,subInitialValue);
      }
    }
    if (arguments.length === 2) {
        return function subFunction(subInput: T[]): any {
            if (arguments.length === 0) {
                return subFunction;
            }
            return (subInput as T[]).reduce(reducer as (accumulator: U, currentValue: T) => U, initialValue as U);
        };
    }
    return (input as T[]).reduce(reducer as (accumulator: U, currentValue: T) => U, initialValue as U);
}

export function add(a: number): typeof add;
export function add(a: number, b: number): number;
export function add(a?: number, b?: number): any {
  if (arguments.length === 0) {
    return add;
  }
  if (arguments.length === 1) {
    return function subFunction(subB?: number): any {
      if (arguments.length === 0) {
        return subFunction;
      }
      return (a as number) + (subB as number);
    };
  }
  return (a as number) + (b as number);
}

export function subtract(a: number): typeof subtract;
export function subtract(a: number, b: number): number;
export function subtract(a?: number, b?: number): any {
  if (arguments.length === 0) {
    return subtract;
  }
  if (arguments.length === 1) {
    return function subFunction(subB?: number): any {
      if (arguments.length === 0) {
        return subFunction;
      }
      return (a as number) - (subB as number);
    };
  }
  return (a as number) - (b as number);
}

export function prop<T, K extends keyof T>(obj: T): typeof prop;
export function prop<T, K extends keyof T>(obj: T, propName: K): T[K];
export function prop<T, K extends keyof T>(obj?: T, propName?: K): any {
  if (arguments.length === 0) {
    return prop;
  }
  if (arguments.length === 1) {
    return function subFunction(subPropName?: K): any {
      if (arguments.length === 0) {
        return subFunction;
      }
      return (obj as T)[subPropName as K];
    };
  }
  return (obj as T)[propName as K];
}
